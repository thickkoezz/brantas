//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "m_countries")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: i16,
  pub name: String,
  pub iso3: Option<String>,
  pub numeric_code: Option<String>,
  pub iso2: Option<String>,
  pub phonecode: Option<String>,
  pub capital: Option<String>,
  pub currency: Option<String>,
  pub currency_name: Option<String>,
  pub currency_symbol: Option<String>,
  pub tld: Option<String>,
  pub native: Option<String>,
  pub region: Option<String>,
  pub region_id: Option<i16>,
  pub subregion: Option<String>,
  pub subregion_id: Option<i16>,
  pub nationality: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub timezones: Option<String>,
  #[sea_orm(column_type = "JsonBinary", nullable)]
  pub translations: Option<Json>,
  #[sea_orm(column_type = "Decimal(Some((10, 8)))", nullable)]
  pub latitude: Option<Decimal>,
  #[sea_orm(column_type = "Decimal(Some((11, 8)))", nullable)]
  pub longitude: Option<Decimal>,
  pub emoji: Option<String>,
  pub emojiu: Option<String>,
  pub created_at: Option<DateTime>,
  pub updated_at: Option<DateTime>,
  pub flag: i16,
  pub wikidataid: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::m_cities::Entity")]
  MCities,
  #[sea_orm(
    belongs_to = "super::m_regions::Entity",
    from = "Column::RegionId",
    to = "super::m_regions::Column::Id",
    on_update = "Restrict",
    on_delete = "Restrict"
  )]
  MRegions,
  #[sea_orm(has_many = "super::m_states::Entity")]
  MStates,
  #[sea_orm(
    belongs_to = "super::m_subregions::Entity",
    from = "Column::SubregionId",
    to = "super::m_subregions::Column::Id",
    on_update = "Restrict",
    on_delete = "Restrict"
  )]
  MSubregions,
}

impl Related<super::m_cities::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::MCities.def()
  }
}

impl Related<super::m_regions::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::MRegions.def()
  }
}

impl Related<super::m_states::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::MStates.def()
  }
}

impl Related<super::m_subregions::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::MSubregions.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
  #[sea_orm(entity = "super::m_cities::Entity")]
  MCities,
  #[sea_orm(entity = "super::m_regions::Entity")]
  MRegions,
  #[sea_orm(entity = "super::m_states::Entity")]
  MStates,
  #[sea_orm(entity = "super::m_subregions::Entity")]
  MSubregions,
}
