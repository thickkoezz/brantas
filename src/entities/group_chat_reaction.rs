//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "group_chat_reaction")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub owner_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub reacted_group_chat_sender_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub reacted_group_chat_group_creator_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub reacted_group_chat_group_created_at: DateTimeWithTimeZone,
  #[sea_orm(primary_key, auto_increment = false)]
  pub reacted_group_chat_created_at: DateTimeWithTimeZone,
  pub created_at: DateTimeWithTimeZone,
  pub reaction_emoji: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::group_chat::Entity",
    from = "(Column::ReactedGroupChatSenderId, Column::ReactedGroupChatGroupCreatorId, Column::ReactedGroupChatGroupCreatedAt, Column::ReactedGroupChatCreatedAt)",
    to = "(super::group_chat::Column::SenderId, super::group_chat::Column::GroupCreatorId, super::group_chat::Column::GroupCreatedAt, super::group_chat::Column::CreatedAt)",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  GroupChat,
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::OwnerId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  UserAccount3,
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::ReactedGroupChatGroupCreatorId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  UserAccount2,
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::ReactedGroupChatSenderId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  UserAccount1,
}

impl Related<super::group_chat::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::GroupChat.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
  #[sea_orm(entity = "super::group_chat::Entity")]
  GroupChat,
  #[sea_orm(
    entity = "super::user_account::Entity",
    def = "Relation::UserAccount3.def()"
  )]
  UserAccount3,
  #[sea_orm(
    entity = "super::user_account::Entity",
    def = "Relation::UserAccount2.def()"
  )]
  UserAccount2,
  #[sea_orm(
    entity = "super::user_account::Entity",
    def = "Relation::UserAccount1.def()"
  )]
  UserAccount1,
}
