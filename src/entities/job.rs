//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "job")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub organization_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub person_id: Uuid,
  pub department_id: Option<Uuid>,
  pub role: Option<String>,
  #[sea_orm(column_type = "Text", nullable)]
  pub job_description: Option<String>,
  pub start_at: Option<Date>,
  pub end_at: Option<Date>,
  pub is_head_of_department: bool,
  #[sea_orm(primary_key, auto_increment = false)]
  pub created_at: DateTimeWithTimeZone,
  pub updated_at: Option<DateTimeWithTimeZone>,
  pub deleted_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::department::Entity",
    from = "Column::DepartmentId",
    to = "super::department::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  Department,
  #[sea_orm(has_many = "super::job_project::Entity")]
  JobProject,
  #[sea_orm(has_many = "super::job_skill::Entity")]
  JobSkill,
  #[sea_orm(
    belongs_to = "super::organization::Entity",
    from = "Column::OrganizationId",
    to = "super::organization::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  Organization,
  #[sea_orm(
    belongs_to = "super::organization_role::Entity",
    from = "(Column::OrganizationId, Column::Role)",
    to = "(super::organization_role::Column::OrganizationId, super::organization_role::Column::Name)",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  OrganizationRole,
  #[sea_orm(
    belongs_to = "super::person::Entity",
    from = "Column::PersonId",
    to = "super::person::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  Person,
}

impl Related<super::department::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Department.def()
  }
}

impl Related<super::job_project::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::JobProject.def()
  }
}

impl Related<super::job_skill::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::JobSkill.def()
  }
}

impl Related<super::organization::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Organization.def()
  }
}

impl Related<super::organization_role::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::OrganizationRole.def()
  }
}

impl Related<super::person::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Person.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
  #[sea_orm(entity = "super::department::Entity")]
  Department,
  #[sea_orm(entity = "super::job_project::Entity")]
  JobProject,
  #[sea_orm(entity = "super::job_skill::Entity")]
  JobSkill,
  #[sea_orm(entity = "super::organization::Entity")]
  Organization,
  #[sea_orm(entity = "super::organization_role::Entity")]
  OrganizationRole,
  #[sea_orm(entity = "super::person::Entity")]
  Person,
}
