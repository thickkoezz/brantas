//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tweet_bookmark")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub owner_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub bookmarked_tweet_owner_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub bookmarked_tweet_created_at: DateTimeWithTimeZone,
  pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::tweet::Entity",
    from = "(Column::BookmarkedTweetOwnerId, Column::BookmarkedTweetCreatedAt)",
    to = "(super::tweet::Column::OwnerId, super::tweet::Column::CreatedAt)",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  Tweet,
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::OwnerId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  Owner,
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::BookmarkedTweetOwnerId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  BookmarkedTweetOwner,
}

impl Related<super::tweet::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Tweet.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
  #[sea_orm(entity = "super::tweet::Entity")]
  Tweet,
  #[sea_orm(
    entity = "super::user_account::Entity",
    def = "Relation::Owner.def()"
  )]
  Owner,
  #[sea_orm(
    entity = "super::user_account::Entity",
    def = "Relation::BookmarkedTweetOwner.def()"
  )]
  BookmarkedTweetOwner,
}
