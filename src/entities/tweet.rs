//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tweet")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub owner_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub created_at: DateTime,
  pub tweet: String,
  pub is_published: bool,
  pub hashtag: Option<String>,
  pub replied_owner_id: Option<Uuid>,
  pub replied_created_at: Option<DateTime>,
  pub retweet_owner_id: Option<Uuid>,
  pub retweet_created_at: Option<DateTime>,
  pub react_count: i32,
  pub reply_count: i32,
  pub retweet_count: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "Entity",
    from = "(Column::RepliedOwnerId, Column::RepliedCreatedAt)",
    to = "(Column::OwnerId, Column::CreatedAt)",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  SelfRef2,
  #[sea_orm(
    belongs_to = "Entity",
    from = "(Column::RetweetOwnerId, Column::RetweetCreatedAt)",
    to = "(Column::OwnerId, Column::CreatedAt)",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  SelfRef1,
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::OwnerId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  UserAccount,
}

impl Related<super::user_account::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::UserAccount.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
  #[sea_orm(entity = "Entity", def = "Relation::SelfRef2.def()")]
  SelfRef2,
  #[sea_orm(entity = "Entity", def = "Relation::SelfRef1.def()")]
  SelfRef1,
  #[sea_orm(entity = "super::user_account::Entity")]
  UserAccount,
  #[sea_orm(entity = "Entity", def = "Relation::SelfRef2.def().rev()")]
  SelfRef2Reverse,
  #[sea_orm(entity = "Entity", def = "Relation::SelfRef1.def().rev()")]
  SelfRef1Reverse,
}
