//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "tweet")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub owner_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub created_at: DateTimeWithTimeZone,
  pub tweet: String,
  pub is_published: bool,
  pub hashtag: Option<String>,
  pub replied_owner_id: Option<Uuid>,
  pub replied_created_at: Option<DateTimeWithTimeZone>,
  pub retweeted_owner_id: Option<Uuid>,
  pub retweeted_created_at: Option<DateTimeWithTimeZone>,
  pub reaction_count: i32,
  pub reply_count: i32,
  pub retweet_count: i32,
  pub updated_at: Option<DateTimeWithTimeZone>,
  pub deleted_at: Option<DateTimeWithTimeZone>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "Entity",
    from = "(Column::RepliedOwnerId, Column::RepliedCreatedAt)",
    to = "(Column::OwnerId, Column::CreatedAt)",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  Replied,
  #[sea_orm(
    belongs_to = "Entity",
    from = "(Column::RetweetedOwnerId, Column::RetweetedCreatedAt)",
    to = "(Column::OwnerId, Column::CreatedAt)",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  Retweeted,
  #[sea_orm(has_many = "super::tweet_bookmark::Entity")]
  TweetBookmark,
  #[sea_orm(has_many = "super::tweet_reaction::Entity")]
  TweetReaction,
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::OwnerId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  Owner,
}

impl Related<super::tweet_bookmark::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::TweetBookmark.def()
  }
}

impl Related<super::tweet_reaction::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::TweetReaction.def()
  }
}

impl Related<super::user_account::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Owner.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
  #[sea_orm(entity = "Entity", def = "Relation::Replied.def()")]
  Replied,
  #[sea_orm(entity = "Entity", def = "Relation::Retweeted.def()")]
  Retweeted,
  #[sea_orm(entity = "super::tweet_bookmark::Entity")]
  TweetBookmark,
  #[sea_orm(entity = "super::tweet_reaction::Entity")]
  TweetReaction,
  #[sea_orm(entity = "super::user_account::Entity")]
  Owner,
  #[sea_orm(entity = "Entity", def = "Relation::Replied.def().rev()")]
  Reply,
  #[sea_orm(entity = "Entity", def = "Relation::Retweeted.def().rev()")]
  Retweet,
}
