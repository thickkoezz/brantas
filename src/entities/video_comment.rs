//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "video_comment")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub owner_id: Uuid,
  #[sea_orm(primary_key, auto_increment = false)]
  pub created_at: DateTimeWithTimeZone,
  pub commented_video_owner_id: Uuid,
  pub commented_video_created_at: DateTimeWithTimeZone,
  pub commented_video: String,
  pub updated_at: Option<DateTimeWithTimeZone>,
  pub deleted_at: Option<DateTimeWithTimeZone>,
  pub content: String,
  pub reaction_count: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::CommentedVideoOwnerId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  CommentedVideoOwner,
  #[sea_orm(
    belongs_to = "super::user_account::Entity",
    from = "Column::OwnerId",
    to = "super::user_account::Column::Id",
    on_update = "Cascade",
    on_delete = "Restrict"
  )]
  Owner,
  #[sea_orm(
    belongs_to = "super::video::Entity",
    from = "(Column::CommentedVideoOwnerId, Column::CommentedVideoCreatedAt, Column::CommentedVideo)",
    to = "(super::video::Column::OwnerId, super::video::Column::CreatedAt, super::video::Column::Video)",
    on_update = "Cascade",
    on_delete = "Cascade"
  )]
  Video,
}

impl Related<super::video::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Video.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
  #[sea_orm(
    entity = "super::user_account::Entity",
    def = "Relation::CommentedVideoOwner.def()"
  )]
  CommentedVideoOwner,
  #[sea_orm(
    entity = "super::user_account::Entity",
    def = "Relation::Owner.def()"
  )]
  Owner,
  #[sea_orm(entity = "super::video::Entity")]
  Video,
}
